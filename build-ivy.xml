<?xml version="1.0" encoding="UTF-8"?>
<!--

Copyright (c) 1998,2009 Michael Toth
Spiralcraft Inc., All Rights Reserved

This package is part of the Spiralcraft project and is licensed under
a multiple-license framework.

You may not use this file except in compliance with the terms found in the
SPIRALCRAFT-LICENSE.txt file at the top of this distribution, or available
at http://www.spiralcraft.org/licensing/SPIRALCRAFT-LICENSE.txt.

Unless otherwise agreed to in writing, this software is distributed on an
"AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.

-->
<project name="build-ivy"
  xmlns:ivy="antlib:org.apache.ivy.ant"
  >
  <property name="publish.resolver.type" value="jar"/>
  <property name="ivy-resolve-conf" value="${ivy.configurations}"/>
  <property name="ivy.package-retrieve-dir" value="${temp.basedir}/ivy-deps"/>
  <property name="ivy-resolver" value="default"/>  
  <property name="ivy-remote-resolver" value="spiralcraft-remote"/>
  <property name="ivy-install-resolver" value="${ivy-remote-resolver}"/>

  <taskdef 
    resource="org/apache/ivy/ant/antlib.xml" 
    uri="antlib:org.apache.ivy.ant"
    classpath="${common-build.dir}/lib/ivy.jar:${common-build.dir}/lib/jsch.jar"
  />
  
  <condition property="isIvy">
    <available file="ivy.xml"/>
  </condition>
  	
  <condition
    property="ivySettings"
    value="${basedir}/ivy.settings.xml"
    >
    <and>
      <isset property="isIvy"/>
      <available file="${basedir}/ivy.settings.xml"/>
    </and>
  </condition>

  <condition
    property="ivySettings"
    value="${common-build.dir}/ivy-local.settings.xml"
    >
    <and>
      <isset property="isIvy"/>
      <available file="${common-build.dir}/ivy-local.settings.xml"/>
    </and>
  </condition>
  
  <condition
    property="ivy.shouldRetrieve"
    >
    <or>
      <and>
        <isset property="isIvy"/>
        <or>
          <isset property="ivy.always-retrieve"/>
          <not>
            <available file="${ivy.ivy-retrieve-dir}"/>
          </not>
        </or>
      </and>
      <equals arg1="${ivy-resolver}" arg2="default"/>
    </or>
  </condition>
  	
  <property name="ivySettings" value="${common-build.dir}/ivy.settings.xml"/>
  <property name="release-keyfile" location="${common-build.dir}/dummy_keyfile"/>  
  <property name="snapshot-keyfile" location="${common-build.dir}/dummy_keyfile"/>  

  <target name="cleanIvyRemoteCache" if="ivy-cleanRemoteCache">
    <echo message="Removing ivy remote cache"/>
    <mkdir dir="${depends.dir}/.ivyremotecache"/>
    <delete dir="${depends.dir}/.ivyremotecache"/>
  </target>
    
  <target name="cleanIvyCache" 
    depends="cleanIvyRemoteCache" 
    description="Clean ivy caches"
    >
    <echo message="Removing temporary ivy cache"/>
    <mkdir dir="${depends.dir}/.ivycache"/>
    <delete dir="${depends.dir}/.ivycache"/>
    <mkdir dir="${ivy.package-retrieve-dir}"/>
    <delete dir="${ivy.package-retrieve-dir}"/>
  </target>

    
  <target name="configure" unless="ivy-configured">
    <echo>ivy-resolver: ${ivy-resolver}</echo>
    <ivy:configure file="${ivySettings}"/> 
    <property name="ivy-configured" value="true"/>
  </target>
    
  <target name="resolve" 
    depends="configure"
    unless="ivy-resolved"
    >
    <resolve/>
  </target>
	
    
  <macrodef name="resolve">
    <sequential>
      <ivy:resolve 
        file="${basedir}/ivy.xml" 
        refresh="true" 
        resolveMode="dynamic"
        conf="${ivy-resolve-conf}"
      />
      <property name="ivy-resolved" value="true"/>
      
    </sequential>
  </macrodef>
      
  <macrodef name="retrieve-libs">
    <sequential>
      <delete failonerror="false">
        <fileset dir="${ivy.lib-retrieve-dir}" includes="*.jar,*.zip"/>
      </delete>
      <delete dir="${ivy.ivy-retrieve-dir}"/>
      <delete dir="${ivy.zip-retrieve-dir}"/>
        
      <if>
        <equals arg1="${ivy.retrieve-lib}" arg2="true"/>
        <then>
          <ivy:retrieve 
            pattern="${ivy.lib-retrieve-dir}/[artifact].[ext]" 
            useOrigin="true" 
            overwriteMode="different"
            ivypattern="${ivy.ivy-retrieve-dir}/[organization]-[module]-[revision].ivy.xml"
            type="jar"
          />
        </then>
      </if>

      <if>
        <equals arg1="${ivy.retrieve-zip}" arg2="true"/>
        <then>
          <ivy:retrieve 
            pattern="${ivy.zip-retrieve-dir}/[artifact].[ext]" 
            useOrigin="true" 
            overwriteMode="different"
            ivypattern="${ivy.ivy-retrieve-dir}/[organization]-[module]-[revision].ivy.xml"
            type="zip"
          />
        </then>
      </if>
    
      <!-- gets npe
        <ivy:artifactreport tofile="${basedir}/lib/ivyreport.xml" />
      -->

      <!-- Makes a distrib/ivys/ivy-nnnnnnn.xml tree
        <ivy:deliver />
      -->
    </sequential>
  </macrodef>



  <macrodef name="retrieve-packages">
    <sequential>
      <delete dir="${ivy.package-retrieve-dir}"/>
      <mkdir dir="${ivy.package-retrieve-dir}"/>
      
      <ivy:retrieve 
        pattern="${ivy.package-retrieve-dir}/[artifact].[ext]" 
        useOrigin="true" 
        overwriteMode="different"
        ivypattern="${ivy.ivy-retrieve-dir}/[organization]-[module]-[revision].ivy.xml"
        type="package"
      />
    </sequential>
  </macrodef> 
    
    
  <target
    name="resolveAndRetrieve"
    >
  </target>
      
  <target 
    name="retrieve" 
    depends="configure"
    if="ivy.shouldRetrieve"
    >
    <resolve/>
    <retrieve-libs/>
    <retrieve-packages/>
    <antcall target="post-retrieve"/>
  </target>

  <target
    name="update-deps"
    depends="configure"
    if="isIvy"
    description="Update all dependencies"
    >
    <resolve/>
    <retrieve-libs/>
    <retrieve-packages/>
    <antcall target="post-retrieve"/>
  </target>
      
    
  <target name="post-retrieve"/>
  
  <condition
    property="publish.overwrite"
    value="false"
    else="true"
    >
    <available 
      file="${depends.dir}/${organization}/${module}/${buildVersion}/CVS"
    />
  </condition>

  
  <target name="publish-local"  depends="resolve"
     if="isIvy" 
    >
    <ivy:publish 
      pubrevision="${buildVersion}" 
      resolver="cvs-${publish.resolver.type}" 
      overwrite="${publish.overwrite}"
      forcedeliver="true"
      srcivypattern="${lib.output.path}/ivy.xml"
      >

      <artifacts pattern="${package-output-dir}/[artifact]-${buildVersion}.zip"/>
      <artifacts pattern="${lib.output.path}/[artifact].jar"/>
      <artifacts pattern="${zip.dir}/[artifact]-${buildVersion}.zip"/>
      <artifacts pattern="${zip.dir}/[artifact]-${buildVersion}.xpi"/>
    </ivy:publish>

    <delete file="${lib.output.path}/ivy.xml"/>
  	
  </target>
    
  <target name="install-dependencies" depends="configure" 
      description="Install dependencies to local repository"
      >

    <for param="ivy.dependency.path">
      <path>
        <fileset dir="${ivy.ivy-retrieve-dir}" includes="*.ivy.xml"/>
      </path>
      <sequential>
        <ivy:info file="@{ivy.dependency.path}" property="ivy.dependency"/>
        <install-dependency 
          path="@{ivy.dependency.path}"
          organisation="${ivy.dependency.organisation}"
          module="${ivy.dependency.module}"
          revision="${ivy.dependency.revision}"
        />
      </sequential>
    </for>
            
  </target>
    
  <macrodef name="install-dependency">
    <attribute name="path"/>
    <attribute name="depends.dir" default="${depends.dir}"/>
    <attribute name="organisation"/>
    <attribute name="module"/>
    <attribute name="revision"/>
    <attribute name="module.path" 
        default="@{depends.dir}/@{organisation}/@{module}/@{revision}"
    />
    <attribute name="temp.path" 
        default="${repo.dir}/@{organisation}/@{module}/@{revision}"
    />
    <sequential>
      <echo message="Checking @{temp.path}"/>
      <ivy:install 
        module="@{module}" 
        from="${ivy-install-resolver}" 
        to="sandbox-${publish.resolver.type}" 
        organisation="@{organisation}" 
        revision="@{revision}" 
        overwrite="true" 
        transitive="false"
      />

      <ivy:info file="@{temp.path}/ivy.xml" property="ivy.remote-dep"/>
        
      <if>
        <not>
          <available file="@{module.path}"/>
        </not>
        <then>
          <echo message="New: @{module.path}"/>
          <copy todir="@{module.path}"
            failonerror="false"
            preservelastmodified="true"
            overwrite="true"
            >
            <fileset dir="@{temp.path}"/>
          </copy>
        </then>
        <else>
          <if>
            <not>
              <equals arg1="${ivy.remote-dep.publication}" arg2="${ivy.dependency.publication}"/>
            </not>
            <then>
              <echo message="Updated: @{module.path} (${ivy.remote-dep.publication} != ${ivy.dependency.publication})"/>
              <copy todir="@{module.path}"
                failonerror="false"
                preservelastmodified="true"
                overwrite="true"
                >
                <fileset dir="@{temp.path}"/>
              </copy>
            </then>
            <else>
              <echo message="Skipping: @{module.path}"/>
            </else>
          </if>
        </else>
      </if>
     
        
    </sequential>
      
  </macrodef>

  <target 
    name="release-upstream" 
    depends="publish-local" 
    if="isIvy"
    >
      
    <ivy:install 
      from="cvs-${publish.resolver.type}" 
      to="release-upstream-${publish.resolver.type}" 
      organisation="${organization}"
      module="${module}"
      revision="${buildVersion}"
    />
  </target>

  <target 
    name="publish-snapshot" 
    depends="publish-local,install-snapshot" 
    if="isIvy" 
    >
        
  </target>
   
  <target
    name="install-snapshot"
    description="install local release to snapshot repo"
    depends="resolve"
    >
    <ivy:install 
      from="cvs-${publish.resolver.type}" 
      to="release-snapshot-${publish.resolver.type}" 
      organisation="${organization}"
      module="${module}"
      revision="${buildVersion}"
      overwrite="true"
    />
  </target>

</project>