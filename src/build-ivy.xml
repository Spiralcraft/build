<?xml version="1.0" encoding="UTF-8"?>
<!--

Copyright (c) 1998,2009 Michael Toth
Spiralcraft Inc., All Rights Reserved

This package is part of the Spiralcraft project and is licensed under
a multiple-license framework.

You may not use this file except in compliance with the terms found in the
SPIRALCRAFT-LICENSE.txt file at the top of this distribution, or available
at http://www.spiralcraft.org/licensing/SPIRALCRAFT-LICENSE.txt.

Unless otherwise agreed to in writing, this software is distributed on an
"AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.

-->
<project name="build-ivy"
  xmlns:ivy="antlib:org.apache.ivy.ant"
  >
  <property name="publish.resolver.type" value="jar"/>
  <property name="ivy-resolve-conf" value="${ivy.configurations}"/>
  <property name="ivy.package-retrieve-dir" value="${temp.basedir}/ivy-deps"/>
  <property name="ivy-resolver" value="default"/>  
  <property name="ivy-remote-resolver" value="spiralcraft-release"/>
  <property name="ivy-install-resolver" value="${ivy-remote-resolver}"/>
  <property name="ivy.status" value="${build.status}"/>

  <taskdef 
    resource="org/apache/ivy/ant/antlib.xml" 
    uri="antlib:org.apache.ivy.ant"
    classpath="${common-build.dir}/lib/ivy.jar:${common-build.dir}/lib/jsch.jar"
  />
  
  <condition property="isIvy">
    <or>
      <available file="ivy.xml"/>
      <available file="ivy.settings.xml"/>
      <available file="ivy-local.settings.xml"/>
    </or>
      
  </condition>
  	
  <condition
    property="ivySettings"
    value="${basedir}/ivy.settings.xml"
    >
    <and>
      <isset property="isIvy"/>
      <available file="${basedir}/ivy.settings.xml"/>
    </and>
  </condition>

  <condition
    property="ivySettings"
    value="${common-build.dir}/ivy-local.settings.xml"
    >
    <and>
      <isset property="isIvy"/>
      <available file="${common-build.dir}/ivy-local.settings.xml"/>
    </and>
  </condition>
  
  <condition
    property="ivy.shouldRetrieve"
    >
    <or>
      <and>
        <isset property="isIvy"/>
        <or>
          <isset property="ivy.always-retrieve"/>
          <not>
            <available file="${ivy.ivy-retrieve-dir}"/>
          </not>
        </or>
      </and>
      <equals arg1="${ivy-resolver}" arg2="default"/>
    </or>
  </condition>
  	
  <property name="ivySettings" value="${common-build.dir}/ivy.settings.xml"/>
  <property name="release-keyfile" location="${common-build.dir}/dummy_keyfile"/>  
  <property name="stable-keyfile" location="${common-build.dir}/dummy_keyfile"/>  
  <property name="snapshot-keyfile" location="${common-build.dir}/dummy_keyfile"/>  

  <target name="cleanIvyRemoteCache" if="ivy-cleanRemoteCache">
    <echo message="Removing ivy remote cache"/>
    <mkdir dir="${depends.dir}/.ivyremotecache"/>
    <delete dir="${depends.dir}/.ivyremotecache"/>
  </target>
    
  <target name="cleanIvyCache" 
    depends="cleanIvyRemoteCache" 
    description="Clean ivy caches"
    >
    <echo message="Removing temporary ivy cache"/>
    <mkdir dir="${depends.dir}/.ivycache"/>
    <delete dir="${depends.dir}/.ivycache"/>
    <mkdir dir="${ivy.package-retrieve-dir}"/>
    <delete dir="${ivy.package-retrieve-dir}"/>
  </target>

  <macrodef name="cleanDefaultCache">
    <sequential>
      <if>
        <available file="${depends.dir}/.ivycache"/>
        <then>
          <delete dir="${depends.dir}/.ivycache"/>
        </then>
      </if>
    </sequential>
  </macrodef>
    
  <macrodef name="cleanAllCaches">
    <sequential>
      <if>
        <available file="${depends.dir}/.ivycache"/>
        <then>
          <delete dir="${depends.dir}/.ivycache"/>
        </then>
      </if>
      <if>
        <available file="${depends.dir}/.ivyremotecache"/>
        <then>
          <delete dir="${depends.dir}/.ivyremotecache"/>
        </then>
      </if>
      <if>
        <available file="${depends.dir}/.ivysnapshotcache"/>
        <then>
          <delete dir="${depends.dir}/.ivysnapshotcache"/>
        </then>
      </if>
      <if>
        <available file="${depends.dir}/.ivystablecache"/>
        <then>
          <delete dir="${depends.dir}/.ivystablecache"/>
        </then>
      </if>
    </sequential>
  </macrodef>

  <macrodef name="configure">
    <attribute name="resolver" default="${ivy-resolver}"/>
    <sequential>
      
      <if>
        <not>
          <isset property="ivy-configured"/>
        </not>
        <then>
          <echo>ivy-resolver: ${ivy-resolver}</echo>
          <ivy:configure file="${ivySettings}"/> 
          <property name="ivy-configured" value="true"/>
        </then>
      </if>
    </sequential>
  </macrodef>
    
  <target name="resolve" 
    unless="ivy-resolved"
    >
    <configure/>
    <resolve/>
  </target>
	
    
  <macrodef name="resolve">
    <sequential>
      <echo message="Resolving for status ${ivy.status}"/>
      <ivy:resolve 
        file="${basedir}/ivy.xml" 
        refresh="true" 
        resolveMode="dynamic"
        conf="${ivy-resolve-conf}"
      />
      <property name="ivy-resolved" value="true"/>
      
    </sequential>
  </macrodef>
      
  <macrodef name="retrieve-libs">
    <sequential>
      <delete failonerror="false">
        <fileset dir="${ivy.lib-retrieve-dir}" includes="*.jar,*.zip"/>
      </delete>
      <delete dir="${ivy.ivy-retrieve-dir}"/>
      <delete dir="${ivy.zip-retrieve-dir}"/>
        
      <if>
        <equals arg1="${ivy.retrieve-lib}" arg2="true"/>
        <then>
          <ivy:retrieve 
            pattern="${ivy.lib-retrieve-dir}/[artifact].[ext]" 
            useOrigin="true" 
            overwriteMode="different"
            ivypattern="${ivy.ivy-retrieve-dir}/[organization]-[module]-[revision].ivy.xml"
            type="jar,bundle"
          />
        </then>
      </if>

      <if>
        <equals arg1="${ivy.retrieve-zip}" arg2="true"/>
        <then>
          <ivy:retrieve 
            pattern="${ivy.zip-retrieve-dir}/[artifact].[ext]" 
            useOrigin="true" 
            overwriteMode="different"
            ivypattern="${ivy.ivy-retrieve-dir}/[organization]-[module]-[revision].ivy.xml"
            type="zip"
          />
        </then>
      </if>
    
      <!-- gets npe
        <ivy:artifactreport tofile="${basedir}/lib/ivyreport.xml" />
      -->

      <!-- Makes a distrib/ivys/ivy-nnnnnnn.xml tree
        <ivy:deliver />
      -->
    </sequential>
  </macrodef>



  <macrodef name="retrieve-packages">
    <sequential>
      <delete dir="${ivy.package-retrieve-dir}"/>
      <!-- <mkdir dir="${ivy.package-retrieve-dir}"/> -->
      
      <ivy:retrieve 
        pattern="${ivy.package-retrieve-dir}/[artifact].[ext]" 
        useOrigin="true" 
        overwriteMode="different"
        ivypattern="${ivy.ivy-retrieve-dir}/[organization]-[module]-[revision].ivy.xml"
        type="package"
      />
    </sequential>
  </macrodef> 
    
    
  <target
    name="resolveAndRetrieve"
    >
  </target>
      
  <target 
    name="retrieve" 
    if="ivy.shouldRetrieve"
    >
    <configure/>
    <resolve/>
    <retrieve-libs/>
    <retrieve-packages/>
    <check-dependencies/>
    <antcall target="post-retrieve"/>
  </target>

  <target
    name="update-deps"
    if="isIvy"
    description="Update all dependencies"
    >
    <configure/>
    <cleanAllCaches/>
    <resolve/>
    <retrieve-libs/>
    <retrieve-packages/>
    <check-dependencies/>
    <antcall target="post-retrieve"/>
  </target>
      
    
  <target name="post-retrieve">
    <echo>Scanning package .zip files for deliverable content</echo>
    <for param="file">
      <path>
        <fileset dir="packages" includes="*.zip" erroronmissingdir="false"/>
      </path>
      <sequential>
        <unzip src="@{file}" dest="lib-js">
          <patternset>
            <include name="lib-js/**"/>
          </patternset> 
          <cutdirsmapper dirs="1"/>
        </unzip>
      </sequential>
    </for>
  </target>
  
  <condition
    property="publish.overwrite"
    value="false"
    else="true"
    >
    <available 
      file="${depends.dir}/${organization}/${module}/${buildVersion}/CVS"
    />
  </condition>

  
  <macrodef name="publish-local">
    <sequential>
      <configure/>
      <resolve/>
      <ivy:info
        organisation="${organization}"
        module="${module}"
        revision="${buildVersion}"
        property="curr"
      />
      <if>
        <or>
          <not>
            <isset property="curr.status"/>
          </not>
          <equals arg1="${curr.status}" arg2="integration"/>
        </or>
        <then>
          <ivy:publish 
            pubrevision="${buildVersion}" 
            resolver="cvs-${publish.resolver.type}" 
            overwrite="${publish.overwrite}"
            forcedeliver="true"
            srcivypattern="${lib.output.path}/ivy.xml"
            status="${build.status}"
            >

            <artifacts pattern="${package-output-dir}/[artifact]-${buildVersion}.zip"/>
            <artifacts pattern="${lib.output.path}/[artifact].jar"/>
            <artifacts pattern="${zip.dir}/[artifact]-${buildVersion}.zip"/>
            <artifacts pattern="${zip.dir}/[artifact]-${buildVersion}.xpi"/>
            <artifacts pattern="${zip.dir}/[artifact]-${buildVersion}.tgz"/>
          </ivy:publish>

          <delete file="${lib.output.path}/ivy.xml"/>
        </then>
        <else>
          <fail message="Not overwriting revision ${curr.revision} in status ${curr.status}"/>
        </else>
      </if>
    </sequential>
  	
  </macrodef>
    
  <macrodef name="check-dependencies">
    <sequential>
      <echo message="Checking dependencies and artificts - build status ${ivy.status}"/>
      <property file="modules.properties"/>      
      <if>
        <available file="${ivy.ivy-retrieve-dir}"/>
        <then>
          <for param="ivy.dependency.path">
            <path>
              <fileset dir="${ivy.ivy-retrieve-dir}" includes="*.ivy.xml"/>
            </path>
            <sequential>
              <ivy:info file="@{ivy.dependency.path}" property="ivy.dependency"/>
              <echo message="${ivy.dependency.organisation}#${ivy.dependency.module};${ivy.dependency.revision} ${ivy.dependency.status}"/>
              <echo message="-- ${ivy.dependency.artifact.1.type}: ${ivy.dependency.artifact.1.name}.${ivy.dependency.artifact.1.ext} "/>
              <if>
                <isset property="${ivy.dependency.organisation}-${ivy.dependency.module}.addRevision"/>
                <then>
                  <echo message="adding revision number to artifact filename"/>
                  <move file="${ivy.lib-retrieve-dir}/${ivy.dependency.artifact.1.name}.${ivy.dependency.artifact.1.ext}"
                  tofile="${ivy.lib-retrieve-dir}/${ivy.dependency.artifact.1.name}-${ivy.dependency.revision}.${ivy.dependency.artifact.1.ext}"
                  />  
                </then>
              </if>
              <if>
                <and>
                  <not>
                    <equals arg1="${ivy.status}" arg2="integration"/>
                  </not>
                  <and>
                    <not>
                      <equals arg1="${ivy.dependency.status}" arg2="${ivy.status}"/>
                    </not>
                    <not>
                      <equals arg1="${ivy.dependency.status}" arg2="release"/>
                    </not>
                  </and>
                </and>
                <then>
                  <fail message="Project with status=${ivy.status} cannot depend on ${ivy.dependency.organisation}-${ivy.dependency.module}-${ivy.dependency.revision} ${ivy.dependency.status}"/>
                </then>
              </if>
            </sequential>
          </for>
        </then>
      </if>
    </sequential>
  </macrodef>

  <macrodef 
    name="release-upstream" 
    >
    <sequential>
      <ivy:install 
        from="cvs-${publish.resolver.type}" 
        to="release-upstream-${publish.resolver.type}" 
        organisation="${organization}"
        module="${module}"
        revision="${buildVersion}"
      />
    </sequential>
  </macrodef>

  <macrodef
    name="install-snapshot"
    >
    <sequential>
      <ivy:install 
        from="cvs-${publish.resolver.type}" 
        to="release-snapshot-${publish.resolver.type}" 
        organisation="${organization}"
        module="${module}"
        revision="${buildVersion}"
        overwrite="true"
      />
    </sequential>
  </macrodef>

  <macrodef
    name="install-stable"
    >
    <sequential>
      <ivy:install 
        from="cvs-${publish.resolver.type}" 
        to="release-stable-${publish.resolver.type}" 
        organisation="${organization}"
        module="${module}"
        revision="${buildVersion}"
      />
    </sequential>
  </macrodef>
    
  <target name="update-repo">
    <configure/>
    <cleanAllCaches/>
    <if>
      <not>
        <available file="modules.ant.xml"/>
      </not>
      <then>
        <copy 
          file="${common-build.dir}/resources/build/modules.ant.xml" 
          todir="${basedir}"
        />
      </then>
    </if>
    
    <ant antfile="modules.ant.xml" inheritall="true"/>
      
  </target>    
    
  <target name="init-repo">
    <configure/>
    <cleanAllCaches/>
    <if>
      <not>
        <available file="${repo.dir}/modules.ant.xml"/>
      </not>
      <then>
        <copy 
          file="${common-build.dir}/resources/build/modules.ant.xml" 
          todir="${repo.dir}"
        />
      </then>
    </if>
    
    <ant antfile="${repo.dir}/modules.ant.xml" inheritall="true"/>
      
  </target>    

  <macrodef name="repo-inst">
    <attribute name="org"/>
    <attribute name="module"/>
    <attribute name="rev"/>
    <attribute name="resolver" default="${ivy-resolver}"/>
    <attribute name="conf" default="*"/>
    <sequential>
      <if>
        <or>
          <not>
            <resourceexists>
              <file file="${repo.dir}/@{org}/@{module}"/>
            </resourceexists>
          </not>
          <not>
            <or>
              <resourcecontains 
                resource="${basedir}/repo-control.txt" 
                substring="[@{org}-@{module}]*"
              />
              <resourcecontains 
                resource="${basedir}/repo-control.txt" 
                substring="[@{org}]*"
              />
            </or>
          </not>
          <resourcecontains 
            resource="${basedir}/repo-control.txt" 
            substring="[@{org}-@{module}]+"
          />
        </or>
        <then>
          <echo message="Updating @{org}#@{module};@{rev}"/>
          <ivy:install from="@{resolver}" to="sandbox-jar"
            organisation="@{org}"
            module="@{module}"
            revision="@{rev}"
            conf="@{conf}"
            overwrite="true"
            type="jar"
          />
          <ivy:install from="@{resolver}" to="sandbox-distrib"
            organisation="@{org}"
            module="@{module}"
            revision="@{rev}"
            conf="@{conf}"
            overwrite="true"
            type="package,zip,bundle"
          />
        </then>
      </if>
    </sequential>
  </macrodef>
    
</project>